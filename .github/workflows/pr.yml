# This is a basic workflow to help you get started with Actions

name: PR

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setupcheck:
    name: Setup
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2

    - name: yarn install
      run: yarn install

    - name: beachball check
      run: npx beachball check --verbose --changehint "::error::Run `yarn change` from root of repo to generate a change file."

  codegen:
    name: Run CodeGen
    runs-on: windows-2022
    needs: setupcheck
    steps:
    - name: setup git
      run: |
        git config --global core.autocrlf false
        git config --global core.filemode false

    - uses: actions/checkout@v2

    - name: yarn install
      run: yarn install

    - uses: nuget/setup-nuget@v1

    - name: NuGet restore
      run: nuget restore example\windows\example.sln

    - name: run CodeGen
      run: dotnet run -verbose -winmd $env:USERPROFILE\.nuget\packages\microsoft.ui.xaml\2.7.0\lib\uap10.0\Microsoft.UI.Xaml.winmd
      working-directory: package\Codegen

    - name: build TS
      run: yarn build

    - name: verify no changes from CodeGen
      shell: powershell
      run: |
        $changed = git status --porcelain=v1
        $changed
        if ($changed -ne $null) { throw "CodeGen detected changes" }

  examplenuget:
    name: Build ExampleNuGet
    runs-on: windows-2022
    needs: setupcheck
    steps:
    - uses: actions/checkout@v2

    - name: yarn install
      run: yarn install

    - name: build TS
      run: yarn build

    - name: build ExampleNuGet
      run: yarn windows --no-launch --no-deploy --no-packager --logging
      working-directory: examplenuget

    - name: Upload appx
      uses: actions/upload-artifact@v2
      with:
        name: ExampleNuGet appx
        path: examplenuget\windows\AppPackages\examplenuget\examplenuget_1.0.0.0_x64_Debug_Test
        if-no-files-found: error

  call-testcli:
    needs: setupcheck
    strategy:
      fail-fast: false
      matrix:
        rnwSource: ['Source', 'NuGet'] # test building with both RNW source and RNW NuGet
        rnwVersion: ['^0.71'] # test key versions (latest)
    uses: './github/workflows/testcli.yml@${{ env.GITHUB_REF_NAME }}'
    with:
      vmImage: windows-2022
      rnwSource: ${{ matrix.rnwSource }}
      rnwVersion: ${{ matrix.rnwVersion }}
    
  call-testcli-old:
    needs: setupcheck
    strategy:
      fail-fast: false
      matrix:
        rnwSource: ['Source', 'NuGet'] # test building with both RNW source and RNW NuGet
        rnwVersion: ['^0.67', '^0.69'] # test key versions (min, partners)
    uses: './github/workflows/testcli.yml@${{ env.GITHUB_REF_NAME }}'
    with:
      vmImage: windows-2019
      rnwSource: ${{ matrix.rnwSource }}
      rnwVersion: ${{ matrix.rnwVersion }}

  package:
    runs-on: windows-2022
    needs: setupcheck
    steps:
    - uses: actions/checkout@v2

    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1

    - name: yarn install
      run: yarn install 

    - name: build TS
      run: yarn build

    - name: npm pack
      run: npm pack
      working-directory: package

    - name: Upload npm package
      uses: actions/upload-artifact@v2
      with:
        name: npm package
        path: package\*.tgz
        if-no-files-found: error

    - name: build Release x64
      run: msbuild /restore /p:RestorePackagesConfig=true package\windows\ReactNativeXaml.sln /p:configuration=Release /p:platform=x64

    - name: Validate size
      shell: powershell
      run: |
        $size = (gci package\windows\x64\Release\ReactNativeXaml\ReactNativeXaml.dll).Length
        $size
        if ($size -gt 1.5MB) {
          throw "DLL is bigger than 1.5MB"
        }

