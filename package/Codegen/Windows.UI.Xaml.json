{
  "baseClasses": [
    "$xaml.UIElement",
    "$xaml.Controls.Primitives.FlyoutBase",
    "$xaml.Documents.TextElement",
    "$xaml.Input.KeyboardAccelerator"
  ],
  "fakeProps": [
    "$xaml.Controls.Primitives.FlyoutBase.IsOpen",
    "$xaml.Documents.Run.Text"
  ],
  "attachedProps": {
    "$xaml.Controls.Grid": "$xaml.UIElement",
    "$xaml.Documents.Typography": [ "$xaml.Controls.TextBlock", "$xaml.Controls.RichTextBlock" ],
  },
  "syntheticProps": [
    {
      "name": "GridLayout",
      "declaringType": "$xaml.Controls.Grid",
      "fakePropertyType": "GridLayout",
      "comment": "An object with a columns and a rows members, each of which is an array of the corresponding dimensions."
    },
    {
      "name": "Priority",
      "declaringType": "$xaml.DependencyObject",
      "propertyType": "System.Int32",
      "comment": "A hint of where this item should be placed within its parent."
    },
    {
      "name": "Resources",
      "declaringType": "$xaml.UIElement",
      "propertyType": "System.Object",
      "comment": "An object of key/value pairs used for lightweight styling."
    },
    {
      "name": "ShowState",
      "declaringType": "$xaml.Controls.ContentDialog",
      "fakePropertyType": "ContentDialogState",
      "comment": "Whether the content dialog should be open, and how."
    }
  ],
  "fakeEnums": [
    {
      "name": "NavigationViewPriority",
      "values": {
        "MenuItem": 0,
        "FooterMenuItem": 1,
        "Content": 2
      }
    },
    {
      "name": "ExpanderPriority",
      "values": {
        "Header": 0,
        "Content": 1
      }
    },
    {
      "name": "CommandBarPriority",
      "values": {
        "PrimaryCommand": 0,
        "SecondaryCommand": 1
      }
    },
    {
      "name": "SplitViewPriority",
      "values": {
        "Content": 0,
        "Pane": 1
      }
    },
    {
      "name": "MenuFlyoutPriority",
      "values": {
        "Attached": 0,
        "Context": 1
      }
    },
    {
      "name": "ContentDialogState",
      "values": {
        "Popup": 0,
        "InPlace": 1,
        "Hidden": 3
      }
    },
    {
      // Windows.UI.Text.FontWeights is a class and we can't statically discover the values of its "enum-like" properties
      "name": "FontWeights",
      "values": {
        "ExtraBlack": 950,
        "Black": 900,
        "ExtraBold": 800,
        "Bold": 700,
        "SemiBold": 600,
        "Medium": 500,
        "Normal": 400,
        "SemiLight": 350,
        "Light": 300,
        "ExtraLight": 200,
        "Thin": 100
      }
    }
  ],
  "syntheticEvents": {
      "$xaml.Controls.ContentDialog.ContentDialogClosed": "$xaml.Controls.ContentDialogResult"
  },
  "propNameMapping": {
    "$xaml.Input.KeyboardAccelerator.Key": "virtualKey",
    "$xaml.Controls.Maps.MapControl.Style": "mapStyle",
    "$xaml.FrameworkElement.Style": "styleKey",
    "$xaml.FrameworkElement.Margin": "xamlMargin",
    "$xaml.Controls.Control.Padding":  "xamlPadding"
  },
  "typeMapping": [
    {
      "name": "$xaml.Style",
      "VM": "String",
      "TS": "string"
    },
    {
      "name": "$xaml.Media.Brush",
      "VM": "Color",
      "TS": "ColorValue"
    },
    {
      "name": "$xaml.Media.SolidColorBrush",
      "VM": "Color",
      "TS": "ColorValue"
    },
    {
      "name": "$xaml.Media.FontFamily",
      "VM": "String",
      "TS": "string"
    },
    {
      "name": "$xaml.Media.ImageSource",
      "VM": "String",
      "TS": "string"
    },
    {
      "name": "Windows.Media.Playback.IMediaPlaybackSource",
      "VM": "String",
      "TS": "string"
    },
    {
      "name": "$xaml.Thickness",
      "VM": "Map",
      "TS": "Thickness"
    },
    {
      "name": "$xaml.CornerRadius",
      "VM": "Map",
      "TS": "CornerRadius"
    },
    {
      "name": "$xaml.Media.Geometry",
      "VM": "String",
      "TS": "string"
    },
    {
      "name": "GridLayout",
      "VM": "Map",
      "TS": "{ rows: GridLength[], columns: GridLength[] }"
    }
  ],
  "commands": {
    "$xaml.Controls.MenuFlyout": [
      {
        "name": "ShowAt",
        "args": {
          "point": "Point"
        }
      }
    ]
  },
  "eventArgsMethods": {
    "$xaml.Input.ContextRequestedEventArgs": [
      "TryGetPosition"
    ]
  }
}