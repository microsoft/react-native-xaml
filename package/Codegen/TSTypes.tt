<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

/*************************************************************
THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY MANUALLY
SOURCE WINMDS USED:
<#
foreach (var winmd in WinMDs) {
#>
  - <#= winmd #>
<#
}
#>
**************************************************************/

import type {
    // Controls
<# foreach (var type in Types.Where(t => Util.HasCtor(t) && Util.GetTSNamespace(t) == "")) { #>
    <#= Util.GetNativePropsName(type) #>,
<# } #>

    // EventArgs
<# foreach (var type in Util.eventArgsTypes.Where(t => Util.GetTSNamespace(t) == "")) { #>
    Native<#= type.GetName() #>,
<# } #>
} from './Props';

<# foreach (var ns in Types.Where(t => Util.HasCtor(t) && Util.GetTSNamespace(t) != "").Union(Util.eventArgsTypes.Where(t => Util.GetTSNamespace(t) != "")).Select(t => Util.GetTSNamespace(t)).Distinct()) { #>
import type { Native<#= ns #> } from './Props';
<# } #>

import React, { ForwardRefExoticComponent, RefAttributes } from 'react';
import { NativeXamlControl } from './NativeXamlControl';
import { findNodeHandle, NativeMethods, UIManager } from 'react-native';

import type { Point, Color } from './Props';

export type { Point, Color };

<# 
foreach (var type in Types.Where(t => Util.HasCtor(t))) { 
    var ns = Util.GetTSNamespace(type);
    var PropsTypeName = $"{Util.ToJsName(type)}Props";
    var RefTypeName = $"{Util.ToJsName(type)}Ref";
    var PartialTypeName = $"_{Util.ToJsName(type)}";
    var NativePropsName = Util.GetNativePropsName(type);
    if (ns != "") { #>
export namespace <#= ns #> {
<#  } #>
export type <#= PropsTypeName #> = Omit<<#= NativePropsName #>, 'type'>;
export type <#= RefTypeName #> = React.Component<<#= NativePropsName #>> & Readonly<NativeMethods>;
<# 
  var commands = Util.GetCommands(type.GetFullName());
  string NativeMethodsFor = commands.Count() == 0 ? string.Empty : $" & NativeMethodsFor_{Util.ToJsName(type)}";
  string PartialNativeMethodsFor = commands.Count() == 0 ? string.Empty : $" & Partial<NativeMethodsFor_{Util.ToJsName(type)}>";

  if (NativeMethodsFor != string.Empty) {
#>
export interface NativeMethodsFor_<#= Util.ToJsName(type) #> {
<#    foreach (var command in commands) { #>
  <#= command.Name #>: (ref: React.RefObject<<#= RefTypeName #>>, args: <#= command.TSArgTypes != null ? command.TSArgTypes : "any[]" #>) => void;
<#    } #>
}
<# } #>
const <#= PartialTypeName #> : (ForwardRefExoticComponent<React.PropsWithChildren<<#= PropsTypeName #>> & RefAttributes<<#= RefTypeName #>>><#= PartialNativeMethodsFor #>) = React.forwardRef((props: React.PropsWithChildren<<#= PropsTypeName #>>, ref: React.ForwardedRef<<#= RefTypeName #>>) => <NativeXamlControl {...props} type='<#= type.GetFullName() #>' ref={ref} />);
<#
    foreach (var command in commands) { #>
<#= PartialTypeName #>.<#= command.Name #> = (ref: React.RefObject<<#= RefTypeName #>>, args: <#= command.TSArgTypes != null ? command.TSArgTypes : "any[]" #>) => {
  const tag = findNodeHandle(ref.current);
  UIManager.dispatchViewManagerCommand(tag, UIManager.getViewManagerConfig('XamlControl').Commands.<#= command.Name #>, <#= command.TSArgTypes != null ? "[args]" : "args" #>);
};
<#  } #>
export const <#= Util.ToJsName(type) #> = (<#= PartialTypeName #> as (ForwardRefExoticComponent<React.PropsWithChildren<<#= PropsTypeName #>> & RefAttributes<<#= RefTypeName #>>><#= NativeMethodsFor #>));

<#  if (ns != "") { #>
}
<#  } #>
<#
} #>

<#
foreach (var ea in Util.eventArgsTypes) {
    var ns = Util.GetTSNamespace(ea);
    if (ns != "") { #>
export namespace <#= ns #> {
<#
    }
#>
export type <#= ea.GetName() #> = <#= Util.GetEventArgsTSType(ea, "Native") #>;    // <#= ea.GetFullName() #> 
<#  if (ns != "") { #>
}
<#  } #>
<#
} #>