<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

/*************************************************************
THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY MANUALLY
SOURCE WINMDS USED:
<#
foreach (var winmd in WinMDs) {
#>
  - <#= winmd #>
<#
}
#>
**************************************************************/

import type { ViewProps, NativeSyntheticEvent, ColorValue } from 'react-native';
import type * as Enums from './Enums';

export type Thickness = number | { left?: number, top?: number, right?: number, bottom?: number };

export type GridLength = number | '*' | 'auto' | `${number}*`;

export type CornerRadius = number | { topLeft?: number, topRight?: number, bottomLeft?: number, bottomRight?: number};

export type Point = { x: number, y: number };

export type Color = { a: number, r: number, g: number, b: number };

export type TypedEvent<TArgs> = {
  sender: any;
  args: TArgs;
}

<# foreach (var t in Util.eventArgsTypes) { 
	var ns = Util.GetTSNamespace(t);
	if (ns != "") { #>
export namespace Native<#= ns #> {
<# } #>
export type Native<#= Util.ToJsName(t) #> = {
<#	foreach (var m in Util.GetEventArgsMethods(t.GetFullName())) { #>
  <#= m #>(<#= Util.GetEventArgsMethodArgs(t, m) #>): <#= Util.GetEventArgsMethodReturnType(t, m) #>
<#  }
	foreach (var prop in t.GetProperties().Where(p => Util.IsInstanceProperty(p))) { 
		var tsType = Util.GetTypeScriptType(prop);
		if (tsType != "any") {
	#>
  readonly <#= Util.ToJsName(prop) #>: <#= tsType #>;
<#
        } 
    }
#>
}
<# if (ns != "") { #>
}
<# } #>
<# } #>

<# var derived = Util.GetDerivedTypes(Types);
foreach (var type in Types) { #>
<# var ns = Util.GetTSNamespace(type);
if (ns != "") { #>
export namespace Native<#= ns #> {
<# } #>
export interface Native<#= Util.ToJsName(type) #>Props extends <#= Util.GetBaseClassProps(type) #> {
<# var typeProp = Util.GetJsTypeProperty(type, derived);
if (typeProp != "") { #>
  type: <#= typeProp #>;
<# }
foreach (var prop in type.GetProperties().Where(p => Util.ShouldEmitPropertyMetadata(p))) { #>
  <#= Util.ToJsName(prop) #>?: <#= Util.GetTypeScriptType(prop) #>;
<# } 
foreach (var prop in FakeProps.Where(p => type == p.DeclaringType)) { #>
  <#= Util.ToJsName(prop) #>?: <#= Util.GetTypeScriptType(prop) #>; // synthetic property
<# } 
foreach (var prop in SyntheticProps.Where(p => type == p.DeclaringType)) { #>
  /**
  * <#= prop.Comment #>
  */
  <#= Util.ToJsName(prop.Name) #>?: <#= Util.GetTypeScriptType(prop) #>; // synthetic property
<# } 
  foreach (var attachedDP in Util.AttachedProperties.Where(p => Properties.Any(sp => sp.Property == p && sp.DeclaringType == type))) {#>
  <#= Util.ToJsName(attachedDP) #>?: <#= Util.GetTypeScriptType(attachedDP) #>; // attached property
<# }
  foreach (var evt in type.GetEvents()) { #>
  on<#= evt.GetName() #>?: (event: NativeSyntheticEvent<<#= Util.GetEventArgsTSName(evt, "Native") #>>) => void;
<# } 
  foreach (var evt in SyntheticEvents.Where(e => type == e.DeclaringType)) { #>
  on<#= evt.Name #>?: (event: NativeSyntheticEvent<<#= Util.GetTypeScriptType(evt) #>>) => void;
<# } #>
}
<# if (ns != "") { #>
}
<# } #>
<# } #>

export type XamlControlProps =<# var first = true; foreach (var type in Types) {
	if (Util.HasCtor(type) || !type.IsSealed) {
		if (!first) #> | <# ;
		
		first = false;
		#> <#= Util.GetNativePropsName(type) #>
	<# }
	} #>;


